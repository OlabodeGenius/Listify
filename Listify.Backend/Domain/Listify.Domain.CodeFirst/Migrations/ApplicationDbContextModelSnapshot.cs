// <auto-generated />
using System;
using Listify.Domain.CodeFirst;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Listify.Domain.CodeFirst.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaylistCountMax")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistSongCount")
                        .HasColumnType("int");

                    b.Property<int>("QueueCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AspNetUserId")
                        .IsUnique()
                        .HasFilter("[AspNetUserId] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("ApplicationUsers","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("ApplicationUsersRooms","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoomConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConnectionType")
                        .HasColumnType("int");

                    b.Property<bool>("HasPingBeenSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserRoomId");

                    b.HasIndex("ConnectionId")
                        .IsUnique()
                        .HasFilter("[ConnectionId] IS NOT NULL");

                    b.ToTable("ApplicationUsersRoomsConnections","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoomCurrencyRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserRoomId");

                    b.HasIndex("CurrencyRoomId");

                    b.ToTable("ApplicationUsersRoomsCurrenciesRoom","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserRoomId");

                    b.ToTable("ChatMessages","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityIncreasePerTick")
                        .HasColumnType("int");

                    b.Property<float>("TimeSecBetweenTick")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Currencies","Listify");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7385db66-c5d6-4f99-84dc-74cf9695a459"),
                            Active = true,
                            CurrencyName = "Tokens",
                            QuantityIncreasePerTick = 1,
                            TimeSecBetweenTick = 30f,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 318, DateTimeKind.Utc).AddTicks(6131),
                            Weight = 1
                        });
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.CurrencyRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampLastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("RoomId");

                    b.ToTable("CurrenciesRoom","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.LogAPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EndPointType")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("LogsAPI","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.LogError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("LogErrors","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("PlaylistName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Playlists","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.PurchasableItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<float>("DiscountApplied")
                        .HasColumnType("real");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchasableItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchasableItemType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<float>("UnitCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("PurchasableItems","Listify");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2baf4f54-875d-4668-8843-8e765e66eb00"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001888/Listify%20Photos/1-playlist_gzqfcr.jpg",
                            PurchasableItemName = "1 Playlist",
                            PurchasableItemType = 0,
                            Quantity = 1,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(331),
                            UnitCost = 1f
                        },
                        new
                        {
                            Id = new Guid("58542258-d6b4-490e-835a-3e78ec8c9d2d"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001883/Listify%20Photos/3-playlist_p0sg3o.jpg",
                            PurchasableItemName = "Pack of 3 Playlist",
                            PurchasableItemType = 0,
                            Quantity = 3,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1284),
                            UnitCost = 2f
                        },
                        new
                        {
                            Id = new Guid("610dfa85-a0d3-4c36-ab8e-0153ff3742ce"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001889/Listify%20Photos/5-playlist_bqmufv.jpg",
                            PurchasableItemName = "Pack of 5 Playlist",
                            PurchasableItemType = 0,
                            Quantity = 5,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1299),
                            UnitCost = 3f
                        },
                        new
                        {
                            Id = new Guid("f217aa5a-a01f-4b7e-891b-b7d9210e8a11"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001889/Listify%20Photos/10-playlist_myaf2g.jpg",
                            PurchasableItemName = "Pack of 10 Playlist",
                            PurchasableItemType = 0,
                            Quantity = 10,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1307),
                            UnitCost = 5f
                        },
                        new
                        {
                            Id = new Guid("5552e1cc-2a96-4590-b2ca-d3305c229353"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001886/Listify%20Photos/15-songs_ut0thz.jpg",
                            PurchasableItemName = "15 Additional Songs Per Playlist",
                            PurchasableItemType = 1,
                            Quantity = 15,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1310),
                            UnitCost = 1f
                        },
                        new
                        {
                            Id = new Guid("018b97a0-c7ea-43e4-9531-3e48dfb3fa6e"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001886/Listify%20Photos/40-songs_xx4al5.jpg",
                            PurchasableItemName = "40 Additional Songs Per Playlist",
                            PurchasableItemType = 1,
                            Quantity = 40,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1313),
                            UnitCost = 2f
                        },
                        new
                        {
                            Id = new Guid("5a72bc3c-7494-484d-a30a-5e6a6c698b0d"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001884/Listify%20Photos/80-songs_gdpufy.jpg",
                            PurchasableItemName = "80 Additional Songs Per Playlist",
                            PurchasableItemType = 1,
                            Quantity = 80,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1322),
                            UnitCost = 3f
                        },
                        new
                        {
                            Id = new Guid("01237025-4ae3-4c73-8ad8-a94c67de8116"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001888/Listify%20Photos/160-songs_ztgjsd.jpg",
                            PurchasableItemName = "160 Additional Songs Per Playlist",
                            PurchasableItemType = 1,
                            Quantity = 160,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1325),
                            UnitCost = 5f
                        },
                        new
                        {
                            Id = new Guid("aa147747-3010-4047-8103-b1b50a93bf7f"),
                            Active = true,
                            DiscountApplied = 0f,
                            ImageUri = "https://res.cloudinary.com/dvdcninhs/image/upload/v1600001885/Listify%20Photos/40-tokens_ppx2qi.jpg",
                            PurchasableItemName = "40 Currencies Per Room",
                            PurchasableItemType = 2,
                            Quantity = 40,
                            TimeStamp = new DateTime(2020, 9, 13, 13, 54, 8, 320, DateTimeKind.Utc).AddTicks(1340),
                            UnitCost = 1f
                        });
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<float>("AmountCharged")
                        .HasColumnType("real");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PurchaseMethod")
                        .HasColumnType("int");

                    b.Property<float>("Subtotal")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Purchases","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.PurchaseLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("PurchasableItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchasableItemId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseLineItems","Listify");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PurchaseLineItem");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowRequests")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRoomLocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoomOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRoomPublic")
                        .HasColumnType("bit");

                    b.Property<string>("RoomCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("RoomCode")
                        .IsUnique()
                        .HasFilter("[RoomCode] IS NOT NULL");

                    b.ToTable("Rooms","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("SongLengthSeconds")
                        .HasColumnType("int");

                    b.Property<string>("SongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("YoutubeId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Songs","Listify");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SongRequestType")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("SongRequests","Listify");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SongRequest");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("ApplicationUserRoomCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserRoomCurrencyId");

                    b.ToTable("Transactions","Listify");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.PurchaseLineItemCurrency", b =>
                {
                    b.HasBaseType("Listify.Domain.Lib.Entities.PurchaseLineItem");

                    b.Property<Guid>("ApplicationUserRoomCurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("PurchaseLineItems","Listify");

                    b.HasDiscriminator().HasValue("PurchaseLineItemCurrency");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongPlaylist", b =>
                {
                    b.HasBaseType("Listify.Domain.Lib.Entities.SongRequest");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PlaylistId");

                    b.ToTable("SongRequests","Listify");

                    b.HasDiscriminator().HasValue("SongPlaylist");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongQueued", b =>
                {
                    b.HasBaseType("Listify.Domain.Lib.Entities.SongRequest");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasBeenPlayed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimestampPlayed")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeightedValue")
                        .HasColumnType("int");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RoomId");

                    b.ToTable("SongRequests","Listify");

                    b.HasDiscriminator().HasValue("SongQueued");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.TransactionSongQueued", b =>
                {
                    b.HasBaseType("Listify.Domain.Lib.Entities.Transaction");

                    b.Property<Guid>("SongQueuedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SongQueuedId");

                    b.ToTable("Transactions","Listify");

                    b.HasDiscriminator().HasValue("TransactionSongQueued");
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoom", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUsersRooms")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Listify.Domain.Lib.Entities.Room", "Room")
                        .WithMany("ApplicationUsersRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoomConnection", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUserRoom", "ApplicationUserRoom")
                        .WithMany("ApplicationUsersRoomsConnections")
                        .HasForeignKey("ApplicationUserRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ApplicationUserRoomCurrencyRoom", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUserRoom", "ApplicationUserRoom")
                        .WithMany("ApplicationUsersRoomsCurrencies")
                        .HasForeignKey("ApplicationUserRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Listify.Domain.Lib.Entities.CurrencyRoom", "CurrencyRoom")
                        .WithMany("ApplicationUsersRoomsCurrenciesRooms")
                        .HasForeignKey("CurrencyRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.ChatMessage", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUserRoom", "ApplicationUserRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ApplicationUserRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.CurrencyRoom", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.Currency", "Currency")
                        .WithMany("CurrenciesRoom")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Listify.Domain.Lib.Entities.Room", "Room")
                        .WithMany("CurrenciesRoom")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.LogAPI", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("LogsAPI")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.LogError", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("LogsErrors")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Playlist", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Playlists")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Purchase", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Purchases")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.PurchaseLineItem", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.PurchasableItem", "PurchasableItem")
                        .WithMany()
                        .HasForeignKey("PurchasableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Listify.Domain.Lib.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseLineItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Room", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Room")
                        .HasForeignKey("Listify.Domain.Lib.Entities.Room", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongRequest", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.Song", "Song")
                        .WithMany("SongRequests")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.Transaction", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUserRoomCurrencyRoom", "ApplicationUserRoomCurrency")
                        .WithMany("Transactions")
                        .HasForeignKey("ApplicationUserRoomCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongPlaylist", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.Playlist", "Playlist")
                        .WithMany("SongsPlaylist")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.SongQueued", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("SongsQueued")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Listify.Domain.Lib.Entities.Room", "Room")
                        .WithMany("SongsQueued")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Listify.Domain.Lib.Entities.TransactionSongQueued", b =>
                {
                    b.HasOne("Listify.Domain.Lib.Entities.SongQueued", "SongQueued")
                        .WithMany("TransactionsSongQueued")
                        .HasForeignKey("SongQueuedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
